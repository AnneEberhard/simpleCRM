    NEW USER CLASS TO COPY
   
    public id?: string;
    public firstName: string;
    public lastName: string;
    public email: string;
    public password: string;

    constructor(obj?: any) {
        this.id = obj ? obj.id : '';
        this.firstName = obj ? obj.firstName : '';
        this.lastName = obj ? obj.lastName : '';
        this.email = obj ? obj.email : '';
        this.password = obj ? obj.password : '';
    }




VERSION VON CHATGPT
async saveUserChatGPT() {
    this.loading = true;
    if (this.birthDate) {
      this.user.birthDate = this.birthDate.getTime();
    }
  
    let docRef = this.getUsersRef();
  
    try {
      await addDoc(docRef, this.user.toJSON());
      console.log('user uploaded')
    } catch (err) {
      console.error(err);
    } finally {
      console.log('anyways')
      this.loading = false;
    }
  }

ERGIBT FEHLER; VERMUTLICH WEGEN : User
    setNoteObject(obj: any, id: string): User {
    return {
      firstName: obj.firstName || '',
      lastName: obj.lastName|| '',
      birthDate: obj.birthDate || '',
      address: obj.address || '',
      zipCode: obj.zipCode || '',
      city: obj.city || '',
      email: obj.email || ''
    }}

      subUserList() {
    const q = query(this.getUsersRef(), limit(100));
    return onSnapshot(q, (list) => {
      this.userList = [];
      list.forEach(element => {
        console.log(element);
        this.userList.push((element.data().toJSON()));
        console.log(this.userList, element.id);
      }
      )
    })
  }

DIREKT IN HTML EINGEBAUT
    closeDialog() {
    this.dialogRef.close();
  }

OHNE ID FUNTKIONIERT
  subUserList() {
    const q = query(this.getUsersRef(), limit(100));
    return onSnapshot(q, (list) => {
      this.userList = [];
      list.forEach(element => {
        this.userList.push((element.data()));
      }
      )
    })
  }

  CHATGPT LÖSUNG
    ngOnInit(): void {
    this.route.url.subscribe(segments => {
      const lastSegment = segments[segments.length - 1];
      this.activeId = lastSegment.toString();
      console.log('activeId:', this.activeId);
    });}

    aADAPTED SOLUTON; CAUSES PROBLEMS WITH THIS:ACTIVE ID    this.route.paramMap.subscribe(paramMap => {
      this.activeId = paramMap.get('id').toString();
      console.log('activeId:', this.activeId);
    });

    VERSUCH; FETCH AUSZULAGERN
      ngOnInit(): void {
    this.route.url.subscribe(segments => {
      const lastSegment = segments[segments.length - 1];
      this.activeId = lastSegment.toString();
      console.log('activeId:', this.activeId);
    });
  
    this.firebaseservice.fetchSingleUser(this.activeId)
      .then(user => {
        this.activeUser = user;
        console.log(this.activeUser);
      })
      .catch(error => {
        console.error(error);
    });
  }

    getCleanJSON(obj: User) { //um mein JSON aufzuräumen für bestimmte Funktionen
    return {
      firstName: obj.firstName || '',
      lastName: obj.lastName|| '',
      birthDate: obj.birthDate || '',
      address: obj.address || '',
      zipCode: obj.zipCode || '',
      city: obj.city || '',
      email: obj.email || ''
    }
  }

  <div class="dialogContainer">
<mat-progress-bar *ngIf="loading" mode="indeterminate"></mat-progress-bar>
<h1 mat-dialog-title>Add User</h1>
<div mat-dialog-content>
  <div class="addUserDialog">
    <mat-form-field appearance="outline" class="marginRight16 marginTop32">
      <mat-label>First Name</mat-label>
      <input [disabled]="loading" matInput placeholder="First Name" formControlName="firstName" />
    </mat-form-field>
    <mat-form-field appearance="outline" class="marginTop32">
      <mat-label>Last Name</mat-label>
      <input [disabled]="loading" [(ngModel)]="user.lastName" matInput placeholder="Last Name" />
    </mat-form-field>
  </div>
  <div class="addUserDialog">
    <mat-form-field appearance="outline" class="width100">
      <mat-label>Email</mat-label>
      <input type="email" [disabled]="loading" [(ngModel)]="user.email" matInput placeholder="Email" />
    </mat-form-field>
  </div>
  <div>
    <mat-form-field appearance="outline" class="width100">
      <mat-label>Birth Date</mat-label>
      <input [disabled]="loading" [(ngModel)]="this.birthDate" matInput [matDatepicker]="picker">
      <!--mat-hint>MM/DD/YYYY</mat-hint-->
      <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>
  </div>
  <div class="addUserDialog">
    <mat-form-field appearance="outline" class="width100">
      <mat-label>Address</mat-label>
      <input [disabled]="loading" [(ngModel)]="user.address" matInput placeholder="Placeholder" />
      <!--mat-hint>Please enter a name</mat-hint-->
    </mat-form-field>
  </div>
  <div class="addUserDialog">
    <mat-form-field appearance="outline" class="marginRight16">
      <mat-label>Zip Code</mat-label>
      <input [disabled]="loading" [(ngModel)]="user.zipCode" matInput placeholder="Zip Code" />
      <!--mat-hint>Please enter a name</mat-hint-->
    </mat-form-field>
    <mat-form-field appearance="outline">
      <mat-label>City</mat-label>
      <input [disabled]="loading" [(ngModel)]="user.city" matInput placeholder="City" />
      <!--mat-hint>Please enter a name</mat-hint-->
    </mat-form-field>
  </div>
</div>
<div mat-dialog-actions>
  <button mat-button [disabled]="loading" (click)="this.dialogRef.close()">Cancel</button>
  <button mat-button [disabled]="loading" (click)="saveUser()" cdkFocusInitial>Save</button>
</div>
</div>


    public toJSON() {
        const json = {
          id: this.id !== undefined ? this.id : '',
          firstName: this.firstName !== undefined ? this.firstName : '',
          lastName: this.lastName !== undefined ? this.lastName : '',
          birthDate: this.birthDate !== undefined ? this.birthDate : '',
          address: this.address !== undefined ? this.address : '',
          zipCode: this.zipCode !== undefined ? this.zipCode : '',
          city: this.city,
          email: this.email,
          level: this.level !== undefined ? this.level : 0, 
          notes: this.notes !== undefined ? this.notes : '', 
          issue: this.issue !== undefined ? this.issue : false, 
        };      
        return json;
      }

      
    public toJSON2() {
      const json = {
        id: this.id !== undefined ? this.id : '',
        firstName: this.firstName !== undefined ? this.firstName : '',
        lastName: this.lastName !== undefined ? this.lastName : '',
        birthDate: this.birthDate instanceof Date ? this.birthDate.getTime() : '',
        address: this.address !== undefined ? this.address : '',
        zipCode: this.zipCode !== undefined ? this.zipCode : '',
        city: this.city !== undefined ? this.city : '',
        email: this.email !== undefined ? this.email : '',
        level: this.level !== undefined ? this.level : 0,
        notes: this.notes !== undefined ? this.notes : '',
        issue: this.issue !== undefined ? this.issue : false, 
      };      
      return json;
    }

     userDataBirthDataAsDate(userData: any) {
    let birthDateTimeStamp = userData.birthDate;
    let birthDateTimeStampToDate = this.firebaseservice.unixTimestampToDate(birthDateTimeStamp);
   // let birthDateFormatted = this.firebaseservice.getFormattedBirthDate(birthDateTimeStampToDate);
   // console.log('birthDateTimeStamp ',birthDateTimeStamp);
   // console.log('birthDateTimeStampToDate ',birthDateTimeStampToDate);
   // console.log('birthDateFormatted ',birthDateFormatted);
    return {
      id: userData ? userData.id : '',
      firstName: userData ? userData.firstName : '',
      lastName: userData ? userData.lastName : '',
      birthDate: birthDateTimeStampToDate,
      address: userData ? userData.address : '',
      zipCode: userData ? userData.zipCode : '',
      city: userData ? userData.city : '',
      email: userData ? userData.email : '',
      level: userData ? userData.level : 0,
      notes: userData ? userData.notes : '',
      issue: userData ? userData.issue : false,
    };
  }

   countLevels4() {
    const levelCount = Array.from({ length: 11 }, (_, level) => ({ name: level.toString(), value: 0 }));

    this.userList.forEach((user: { level: number; }) => {
      if (user.level >= 0 && user.level <= 10) {
        levelCount[user.level].value++;
      }
    });

    const resultJsonArray = levelCount.filter(level => level.value > 0);
    this.userLevelsData = resultJsonArray;
    console.log(resultJsonArray);
  }



  countLevels3() {
    const levelCount = Array.from({ length: 11 }, (_, level) => ({ level, count: 0 }));

    this.userList.forEach((user: { level: number; }) => {
      if (user.level >= 0 && user.level <= 10) {
        levelCount[user.level].count++;
      }
    });

    const resultJsonArray = levelCount.filter(level => level.count > 0);
    this.userLevelsData = resultJsonArray;
    console.log(resultJsonArray);

  }


  countLevels2() {
    const levelCount = Array.from({ length: 11 }, () => 0);
    for (let i = 0; i < this.userLevels.length; i++) {
      this.userList.forEach((user: { level: number; }) => {
        if (user.level == i) {
          this.userLevels[i]++;
        }
      })
    }
    console.log('userlevel: ', this.userLevels)
  }


  <div class="grid-container">
  <h1 class="mat-h1">Dashboard</h1>
  <mat-grid-list cols="2" rowHeight="150px">
    <mat-grid-tile class="toptile">
      <mat-card class="dashboard-card ">
        <mat-card-header>
          <mat-card-title>
            {{ this.greetingMessage }}
          </mat-card-title>
        </mat-card-header>
        <mat-card-content class="dashboard-card-content">
            Name
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
    <mat-grid-tile>
      <mat-card class="dashboard-card ">
        <mat-card-header>
          <mat-card-title>
            {{ this.userCount }}
          </mat-card-title>
        </mat-card-header>
        <mat-card-content class="dashboard-card-content">
            Members currently enrolled
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
    <mat-grid-tile>
      <mat-card class="dashboard-card">
        <mat-card-header>
          <mat-card-title> {{ this.userAverageLevel }} </mat-card-title>
        </mat-card-header>
        <mat-card-content class="dashboard-card-content">
          <div> Average Level</div>
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
    <mat-grid-tile>
      <mat-card class="dashboard-card">
        <mat-card-header>
          <mat-card-title> {{ this.userIssues }} </mat-card-title>
        </mat-card-header>
        <mat-card-content class="dashboard-card-content">
          <div> Members currently with open Issues</div>
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
    <mat-grid-tile>
      <mat-card class="dashboard-card">
        <mat-card-header>
          <mat-card-title> {{ this.archiveCount }} </mat-card-title>
        </mat-card-header>
        <mat-card-content class="dashboard-card-content">
          <div>Archived Members</div>
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
  </mat-grid-list>
</div>


  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
    map(({ matches }) => {
      if (matches) {
        return [
          { title: this.greetingMessage, cols: 1, rows: 1, content: this.nameToGreet },
          { title: this.userCount, cols: 1, rows: 1, content: 'Members currently enrolled' },
          { title: this.userAverageLevel, cols: 1, rows: 1, content: 'Average Level of enrolled Members' },
          { title: this.userIssues, cols: 1, rows: 1, content: 'Members with open Issues' },
          { title: this.firebaseservice.archiveCount, cols: 1, rows: 1, content: 'Archived Members' }
        ];
      }

      return [
        { title: this.greetingMessage, cols: 2, rows: 1, content: this.nameToGreet },
        { title: this.userCount, cols: 1, rows: 1, content: 'Members currently enrolled' },
        { title: this.userAverageLevel, cols: 1, rows: 1, content: 'Average Level of enrolled Members' },
        { title: this.userIssues, cols: 1, rows: 1, content: 'Members with open Issues' },
        { title: this.firebaseservice.archiveCount, cols: 1, rows: 1, content: 'Archived Members' }
      ];
    })
  );

    
  
  subUserList2() {
    const q = query(this.getUsersRef('users'), limit(100));
    return onSnapshot(q, (querySnapshot) => {
      this.userList = [];
      querySnapshot.forEach((doc: QueryDocumentSnapshot) => {
        const docId = doc.id;
        const userData = doc.data();
        const user = new User(userData);
        user.id = docId;
        this.userList.push(user);
        console.log('FirebBaseusersList',this.userList);
        this.updateUser('users', user);
      });
    });
  }

  
  subarchiveList() {
    const q = query(this.getUsersRef('archive'), limit(100));
    return onSnapshot(q, (querySnapshot) => {
      this.archiveList = [];
      querySnapshot.forEach((doc: QueryDocumentSnapshot) => {
        const userData = doc.data();
        const user = new User(userData);
        this.archiveList.push(user);
      });
      this.archiveCount = this.archiveList.length;
    });
  }